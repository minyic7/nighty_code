%%{init: {'theme':'dark', 'themeVariables': { 'primaryColor':'#1f2937', 'primaryTextColor':'#fff', 'primaryBorderColor':'#7C3AED', 'lineColor':'#F59E0B', 'secondaryColor':'#6366F1', 'tertiaryColor':'#10B981'}}}%%

graph TB
    %% Copilot Module - Cognitive Architecture
    %% Shows implemented components and their actual data flow
    
    subgraph Input["üì• Input Layer"]
        UserMessage["User Message<br/>Natural Language"]
        SessionContext["Session Context<br/>History & State"]
    end
    
    subgraph CognitiveEngine["üß† Cognitive Processing Engine (nodes/cognitive.py)"]
        
        subgraph Understanding["üéØ Understanding Phase"]
            MultiHypothesis["Multi-Hypothesis Generation<br/>‚Ä¢ Generate 3-5 interpretations<br/>‚Ä¢ Evidence gathering<br/>‚Ä¢ Confidence scoring"]
            HypothesisTesting["Hypothesis Testing<br/>‚Ä¢ Test top hypothesis<br/>‚Ä¢ Adjust confidence<br/>‚Ä¢ Select best intent"]
            FastPath["Fast Path Detection<br/>‚Ä¢ Simple queries<br/>‚Ä¢ Direct responses<br/>‚Ä¢ Skip complex flow"]
        end
        
        subgraph Planning["üìã Planning Phase"]
            GoalSetting["Goal Definition<br/>‚Ä¢ Extract main objective<br/>‚Ä¢ Identify requirements"]
            StepGeneration["Step Generation<br/>‚Ä¢ Break into tasks<br/>‚Ä¢ Order operations<br/>‚Ä¢ Estimate complexity"]
            ToolMapping["Tool Mapping<br/>‚Ä¢ Match tools to tasks<br/>‚Ä¢ Check availability<br/>‚Ä¢ Plan parameters"]
        end
        
        subgraph Reasoning["ü§î Reasoning Phase"]
            ContextAnalysis["Context Analysis<br/>‚Ä¢ Current situation<br/>‚Ä¢ Recent actions<br/>‚Ä¢ Available data"]
            NextAction["Next Action Decision<br/>‚Ä¢ Evaluate options<br/>‚Ä¢ Risk assessment<br/>‚Ä¢ Select action"]
        end
        
        subgraph Reflection["üîÑ Reflection Phase"]
            ExperienceAnalysis["Experience Analysis<br/>‚Ä¢ What worked<br/>‚Ä¢ What failed<br/>‚Ä¢ Success patterns"]
            LessonExtraction["Lesson Extraction<br/>‚Ä¢ Key learnings<br/>‚Ä¢ Improvements<br/>‚Ä¢ Memory updates"]
        end
    end
    
    subgraph StateManagement["üìä State & Memory (core/types.py)"]
        CopilotState["CopilotState<br/>‚Ä¢ Messages[]<br/>‚Ä¢ Thoughts[]<br/>‚Ä¢ Hypotheses[]<br/>‚Ä¢ Plans[]<br/>‚Ä¢ Confidence Scores"]
        
        MemorySystem["Memory System<br/>‚Ä¢ Short-term: current context<br/>‚Ä¢ Long-term: learned patterns<br/>‚Ä¢ Session isolation"]
        
        ThoughtHistory["Thought History<br/>‚Ä¢ Understanding thoughts<br/>‚Ä¢ Planning thoughts<br/>‚Ä¢ Reasoning thoughts<br/>‚Ä¢ Reflection thoughts"]
    end
    
    subgraph SafetyLayer["üõ°Ô∏è Safety & Validation (guardrails/)"]
        InputValidation["Input Validation<br/>‚Ä¢ Content filtering<br/>‚Ä¢ PII detection<br/>‚Ä¢ Injection prevention"]
        
        OutputValidation["Output Validation<br/>‚Ä¢ Response safety<br/>‚Ä¢ Compliance check<br/>‚Ä¢ Quality assurance"]
    end
    
    subgraph ToolIntegration["üîß Tool Integration"]
        MCPInterface["MCP Interface<br/>‚Ä¢ Tool discovery<br/>‚Ä¢ Tool execution<br/>‚Ä¢ Result handling"]
        
        ToolRouter["Tool Router<br/>‚Ä¢ Select appropriate tool<br/>‚Ä¢ Map parameters<br/>‚Ä¢ Handle responses"]
    end
    
    subgraph WorkflowEngine["‚öôÔ∏è Workflow Engine (core/workflow.py)"]
        NodeOrchestrator["Node Orchestrator<br/>‚Ä¢ Execute cognitive nodes<br/>‚Ä¢ Manage flow control<br/>‚Ä¢ Handle node transitions"]
        
        SessionManager["Session Manager<br/>‚Ä¢ Track sessions<br/>‚Ä¢ Maintain isolation<br/>‚Ä¢ Handle lifecycle"]
    end
    
    subgraph Output["üì§ Output Generation"]
        ResponseBuilder["Response Builder<br/>‚Ä¢ Natural language<br/>‚Ä¢ Structured data<br/>‚Ä¢ Format output"]
        
        ActionExecutor["Action Executor<br/>‚Ä¢ Execute decisions<br/>‚Ä¢ Call tools<br/>‚Ä¢ Return results"]
    end
    
    %% Main Flow
    UserMessage --> Understanding
    SessionContext --> CopilotState
    
    Understanding --> MultiHypothesis
    MultiHypothesis --> HypothesisTesting
    HypothesisTesting --> FastPath
    
    FastPath -->|Simple| ResponseBuilder
    FastPath -->|Complex| Planning
    
    Planning --> GoalSetting
    GoalSetting --> StepGeneration
    StepGeneration --> ToolMapping
    
    ToolMapping --> Reasoning
    Reasoning --> ContextAnalysis
    ContextAnalysis --> NextAction
    
    NextAction --> MCPInterface
    MCPInterface --> ToolRouter
    ToolRouter --> ActionExecutor
    
    ActionExecutor --> ExperienceAnalysis
    ExperienceAnalysis --> LessonExtraction
    LessonExtraction --> MemorySystem
    
    %% State Updates
    Understanding -.->|Update| CopilotState
    Planning -.->|Update| CopilotState
    Reasoning -.->|Update| ThoughtHistory
    Reflection -.->|Update| MemorySystem
    
    %% Safety Checks
    UserMessage --> InputValidation
    InputValidation --> Understanding
    ResponseBuilder --> OutputValidation
    OutputValidation --> Output
    
    %% Workflow Control
    NodeOrchestrator --> Understanding
    NodeOrchestrator --> Planning
    NodeOrchestrator --> Reasoning
    NodeOrchestrator --> Reflection
    
    SessionManager --> CopilotState
    
    style CognitiveEngine fill:#1e3a5f,stroke:#3b82f6,stroke-width:3px
    style StateManagement fill:#1e453f,stroke:#10b981,stroke-width:2px
    style SafetyLayer fill:#3f2e1e,stroke:#ef4444,stroke-width:2px
    style WorkflowEngine fill:#312e4f,stroke:#8b5cf6,stroke-width:2px
    style ToolIntegration fill:#1e293b,stroke:#f59e0b,stroke-width:2px
    
    %% Implementation Status Note
    subgraph Legend["üìå Implementation Status"]
        FullyImplemented["‚úÖ All components shown are implemented<br/>Files: cognitive.py, workflow.py, types.py, guardrails/"]
        FutureEnhancements["üîÆ Future: Advanced memory, semantic search, learning system"]
    end
    
    style Legend fill:#1a1a2e,stroke:#666,stroke-width:1px,stroke-dasharray: 5 5