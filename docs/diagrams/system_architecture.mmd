%%{init: {'theme':'dark', 'themeVariables': { 'primaryColor':'#1f2937', 'primaryTextColor':'#fff', 'primaryBorderColor':'#7C3AED', 'lineColor':'#F59E0B', 'secondaryColor':'#6366F1', 'tertiaryColor':'#10B981'}}}%%

graph TB
    %% Nighty Code - System Architecture
    %% Shows how all modules integrate and work together
    
    subgraph UserInterface["👤 User Interface Layer"]
        PythonAPI["Python API<br/>✅ Implemented<br/>• Direct import<br/>• Async/await support<br/>• Type hints"]
        
        FutureCLI["CLI Tool<br/>🔮 Future<br/>• Command interface<br/>• Interactive mode"]
        
        FutureREST["REST API<br/>🔮 Future<br/>• HTTP endpoints<br/>• OpenAPI spec"]
    end
    
    subgraph CoreModules["🧩 Core Modules (All Implemented)"]
        
        subgraph Copilot["🧠 Copilot Module"]
            CopilotEngine["Cognitive Engine<br/>• Multi-hypothesis reasoning<br/>• Planning & execution<br/>• Memory management<br/>• Workflow orchestration"]
        end
        
        subgraph DataMiner["⛏️ DataMiner Module"]
            DataMinerEngine["Extraction Engine<br/>• 4 extraction strategies<br/>• Schema validation<br/>• Confidence scoring<br/>• Type-safe output"]
        end
        
        subgraph LLM["🤖 LLM Module"]
            LLMEngine["Provider Manager<br/>• Anthropic & OpenAI<br/>• Connection pooling<br/>• Middleware pipeline<br/>• Structured output"]
        end
        
        subgraph MCP["🔧 MCP Module"]
            MCPEngine["Tool Manager<br/>• Filesystem server<br/>• Tool registry<br/>• Safe execution<br/>• Extensible architecture"]
        end
    end
    
    subgraph ModuleIntegration["🔗 Module Integration Patterns"]
        
        CopilotUsesLLM["Copilot → LLM<br/>• Cognitive nodes<br/>• Understanding<br/>• Planning<br/>• Reasoning"]
        
        CopilotUsesMCP["Copilot → MCP<br/>• Tool execution<br/>• File operations<br/>• Resource access"]
        
        DataMinerUsesLLM["DataMiner → LLM<br/>• Extraction calls<br/>• Refinement<br/>• Validation"]
        
        DataMinerUsesCopilot["DataMiner → Copilot<br/>• Cognitive strategy<br/>• Complex reasoning<br/>• Planning extraction"]
    end
    
    subgraph CommonInfrastructure["🏗️ Common Infrastructure"]
        
        TypeSystem["Type System<br/>• Pydantic models<br/>• Type validation<br/>• Serialization"]
        
        ConfigManagement["Configuration<br/>• Environment vars<br/>• Config files<br/>• Runtime settings"]
        
        ErrorHandling["Error Handling<br/>• Custom exceptions<br/>• Recovery strategies<br/>• Graceful degradation"]
        
        Logging["Logging<br/>• Module loggers<br/>• Debug levels<br/>• Structured logs"]
    end
    
    subgraph ExternalDependencies["☁️ External Dependencies"]
        
        AIProviders["AI Providers<br/>• Anthropic API<br/>• OpenAI API<br/>• Model selection"]
        
        PythonPackages["Python Packages<br/>• Pydantic<br/>• Instructor<br/>• Async libraries"]
        
        FileSystem["File System<br/>• Local storage<br/>• Path operations<br/>• File I/O"]
    end
    
    subgraph UsagePatterns["💡 Common Usage Patterns"]
        
        Pattern1["Code Analysis<br/>1. User request → Copilot<br/>2. Copilot plans → MCP reads<br/>3. DataMiner extracts → LLM processes<br/>4. Results returned"]
        
        Pattern2["Document Processing<br/>1. Load document → DataMiner<br/>2. Select strategy → LLM extracts<br/>3. Validate schema → Output"]
        
        Pattern3["Interactive Assistant<br/>1. User query → Copilot<br/>2. Multi-hypothesis → Tool selection<br/>3. Execute tools → Response"]
    end
    
    %% User Flow
    PythonAPI --> CoreModules
    FutureCLI -.->|Planned| CoreModules
    FutureREST -.->|Planned| CoreModules
    
    %% Module Dependencies
    CopilotEngine --> LLMEngine
    CopilotEngine --> MCPEngine
    DataMinerEngine --> LLMEngine
    DataMinerEngine --> CopilotEngine
    
    %% Infrastructure Usage
    CoreModules --> TypeSystem
    CoreModules --> ConfigManagement
    CoreModules --> ErrorHandling
    CoreModules --> Logging
    
    %% External Dependencies
    LLMEngine --> AIProviders
    CoreModules --> PythonPackages
    MCPEngine --> FileSystem
    
    %% Integration Examples
    CopilotUsesLLM -.-> Pattern1
    CopilotUsesMCP -.-> Pattern1
    DataMinerUsesLLM -.-> Pattern2
    DataMinerUsesCopilot -.-> Pattern3
    
    style UserInterface fill:#1e3a5f,stroke:#3b82f6,stroke-width:2px
    style CoreModules fill:#1e453f,stroke:#10b981,stroke-width:3px
    style ModuleIntegration fill:#312e4f,stroke:#8b5cf6,stroke-width:2px
    style CommonInfrastructure fill:#1e293b,stroke:#f59e0b,stroke-width:2px
    style ExternalDependencies fill:#2d1b47,stroke:#ec4899,stroke-width:2px
    style UsagePatterns fill:#374151,stroke:#6b7280,stroke-width:2px
    
    %% Implementation Status
    subgraph Legend["📌 System Status"]
        CoreComplete["✅ Core: All 4 modules fully implemented"]
        IntegrationWorking["🔗 Integration: Modules work together seamlessly"]
        FutureExpansion["🔮 Future: CLI, REST API, Additional MCP servers"]
    end
    
    style Legend fill:#1a1a2e,stroke:#666,stroke-width:1px,stroke-dasharray: 5 5